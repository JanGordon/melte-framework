package compile

import (
	"fmt"
	"os"
	"path/filepath"
	"strings"

	"golang.org/x/net/html"
	"golang.org/x/net/html/atom"
	"rogchap.com/v8go"
)

type Context struct {
	path  string
	v8Ctx *v8go.Context
}

var CCount = 0
var Contexts []Context

func getContext(path string) *v8go.Context {
	var ctx *v8go.Context
	path, _ = filepath.Split(path)
	for c := 0; c < len(Contexts); c++ {
		if Contexts[c].path == path {
			ctx = Contexts[c].v8Ctx
		}
	}
	if ctx == nil {
		ctx = v8go.NewContext()
		Contexts = append(Contexts, Context{path, ctx})
	}
	return ctx
}
func ReplaceComponentWithHTML(root html.Node, findLayouts bool, pagePath string) html.Node {
	CCount++
	// var css []string
	var ctx = getContext(pagePath)
	replace(&root, pagePath, ctx)
	if findLayouts {
		dir := filepath.Dir(filepath.Join(pagePath))
		files, err := os.ReadDir(dir)
		if err != nil {
			panic(fmt.Errorf("failed to read directory"))
		}
	out:
		for {
			for _, f := range files {
				if !f.IsDir() && strings.HasPrefix(f.Name(), "layout") {
					file, err := os.ReadFile(filepath.Join(dir, f.Name()))
					if err != nil {
						panic(fmt.Errorf("%s: missing or moved", pagePath))
					}
					tempRender(pagePath, &root)
					newRootOut, err := os.ReadFile(pagePath)
					if err != nil {
						panic(fmt.Errorf("%s: missing or moved", pagePath))
					}
					parsed := ParseHTMLStringAsComponent(string(newRootOut), pagePath)
					for _, child := range parsed {
						child.Parent.RemoveChild(child)
					}
					root = ReplaceLayoutWithHTML(ParseHTMLFragmentFromString(string(file), pagePath), parsed, pagePath)
					break out
				}

			}
			if strings.HasSuffix(dir, "/routes") {
				break out
			}
			dir = filepath.Dir(filepath.Join(dir))
			files, err = os.ReadDir(dir)
			if err != nil {
				panic(err)
			}
		}
	}

	return root
}

func ReplaceLayoutWithHTML(root html.Node, slotInserts []*html.Node, pagePath string) html.Node {
	CCount++
	var ctx = getContext(pagePath)
	newRoot := root
	slotInsert = slotInserts
	replaceSlot((&root), pagePath, &newRoot, false, ctx)
	return root
}

func ReplaceCustomComponentWithHTML(root []*html.Node, pagePath string) []*html.Node {
	var ctx = getContext(pagePath)
	for _, child := range root {
		replace(child, pagePath, ctx)
		CCount++
	}
	return root
}

func tempRender(path string, root *html.Node) {
	tempRootOut, err := os.OpenFile(path, os.O_CREATE|os.O_RDWR, 0755)
	if err != nil {
		panic(err)
	}
	tempRootOut.Write([]byte{})
	for child := root.FirstChild; child != nil; child = child.NextSibling {
		if child.Type == html.ElementNode {
			child.Attr = append(child.Attr, html.Attribute{
				Key: "tempRendered",
				Val: "1",
			})
		}

		if err = html.Render(tempRootOut, child); err != nil {
			panic(err)
		}
	}
	defer tempRootOut.Close()
}

var Scripts []html.Node
var ExternalScripts []string
var HeadScripts []html.Node
var ScriptIDs []string
var slotInsert []*html.Node

func replace(n *html.Node, pagePath string, ctx *v8go.Context) {
	fmt.Println(n.Data)
	CCount++
	if n.Type == html.ElementNode {
		wd, err := os.Getwd()
		if err != nil {
			panic("failed to get working directory")
		}
		// seeing if custom component exists

		_, err = os.ReadFile(filepath.Join(wd, "components", n.Data+".melte"))
		if err == nil {
			slotInsert = nil
			c := n.FirstChild
			for {
				slotInsert = append(slotInsert, c)
				if c != n.LastChild {
					c = c.NextSibling

				} else {
					break
				}

			}
			for _, child := range slotInsert {
				n.RemoveChild(child)
			}
			component := ReplaceCustomComponentWithHTML(ParseHTMLAsComponent(filepath.Join(wd, "components", n.Data+".melte")), filepath.Join(wd, "components")) // adds components scripts to Scripts

			n.Attr = append(n.Attr, html.Attribute{
				Key: "melte-id",
				Val: n.Data + fmt.Sprintf("%d", CCount),
			})
			// out:
			OutScript := fmt.Sprintf(`const SELF = document.querySelector("[melte-id='%s']")`, n.Data+fmt.Sprintf("%d", CCount))

			scriptData := OutScript
		c:
			for _, child := range component {
				if child.Data == "style" {
					internalStyle := ""
					for _, attr := range child.Attr {
						if attr.Key == "src" {
							f, err := os.ReadFile(resolveURL(attr.Val))
							if err != nil {
								panic("failed to open stylesheet at : " + attr.Val)
							}
							internalStyle = string(f)
						}
					}
					if internalStyle == "" {
						internalStyle = child.FirstChild.Data
					}

				}
				if child.Data == "script" {

					// this doesnt loop over scripts in html file: fix
					// We need to move the script to end and add module tag
					for _, a := range child.Attr {
						if a.Key == "ssr" {
							ctx.RunScript(OutScript+child.FirstChild.Data, fmt.Sprintf("%v.js", CCount))
						}

					}

					for _, i := range child.Attr {
						if i.Key == "type" && i.Val == "module" {
							isExternal := false
							p := ""
							for _, k := range child.Attr {
								if k.Key == "src" {
									isExternal = true
									p = k.Val
									k.Val += ".melte-out.js"
								}
							}
							fmt.Println("External")

							if isExternal {
								ExternalScripts = append(ExternalScripts, p)
								continue c
							} else {
								scriptComponent := &html.Node{
									Data:     "script",
									Type:     html.ElementNode,
									DataAtom: atom.Script,
									Attr:     child.Attr,
								}
								for child := child.FirstChild; child != nil; child = child.NextSibling {
									newScript := &html.Node{
										Data: OutScript + child.Data,
										Type: html.TextNode,
									}
									scriptComponent.AppendChild(newScript)
								}
								scriptComponent.Attr = append(scriptComponent.Attr, html.Attribute{
									Key: "melte-docpos",
									Val: pagePath,
								})

								child.RemoveChild(child.FirstChild)
								if err != nil {
									panic(err)
								}
								Scripts = append(Scripts, *scriptComponent)
								ScriptIDs = append(ScriptIDs, fmt.Sprintf("out-%s%d.js", n.Data, CCount))
								if child.Parent != nil {
									child.Parent.RemoveChild(child)

								}
								continue c
							}

						}
					}
					scriptData += child.FirstChild.Data
					if child.Parent != nil {
						child.Parent.RemoveChild(child)

					}
				} else {
					n.AppendChild(child)
				}
			}
			if scriptData != OutScript {
				scriptComponent := &html.Node{
					Data:     "script",
					Type:     html.ElementNode,
					DataAtom: atom.Script,
				}
				newScript := &html.Node{
					Data: scriptData,
					Type: html.TextNode,
				}
				scriptComponent.AppendChild(newScript)

				scriptComponent.Attr = append(scriptComponent.Attr, html.Attribute{
					Key: "melte-docpos",
					Val: pagePath,
				})
				Scripts = append(Scripts, *scriptComponent)
				ScriptIDs = append(ScriptIDs, fmt.Sprintf("out-%s%d.js", n.Data, CCount))

			}
		}
		if n.Data == "slot" && !isChildOf(n, "slot") {
			n.Attr = append(n.Attr, html.Attribute{
				Key: "melte-id",
				Val: n.Data + fmt.Sprintf("%d", CCount),
			})
			for _, i := range slotInsert {
				n.AppendChild(i)

			}
			n.Data = "slotted"
		}

	}

	for child := n.FirstChild; child != nil; child = child.NextSibling {
		replace(child, pagePath, ctx)
	}
}

func replaceSlot(n *html.Node, pagePath string, rootCopy *html.Node, cont bool, ctx *v8go.Context) {
	CCount++
	done := cont
	if n.Type == html.ElementNode {
		wd, err := os.Getwd()
		if err != nil {
			panic("failed to get working directory")
		}
		// seeing if custom component exists
		_, err = os.ReadFile(filepath.Join(wd, "components", n.Data+".melte"))
		if err == nil {
			// found a custom component so need to set currentSlot to slot
			slotInsert = nil
			c := n.FirstChild
			for {
				slotInsert = append(slotInsert, c)
				if c != n.LastChild {
					c = c.NextSibling

				} else {
					break
				}

			}
			for _, child := range slotInsert {
				n.RemoveChild(child)
			}
			component := ReplaceCustomComponentWithHTML(ParseHTMLAsComponent(filepath.Join(wd, "components", n.Data+".melte")), filepath.Join(wd, "components")) // adds components scripts to Scripts

			n.Attr = append(n.Attr, html.Attribute{
				Key: "melte-id",
				Val: n.Data + fmt.Sprintf("%d", CCount),
			})
			scriptData := ""
		c:
			for _, child := range component {
				if child.Data == "script" {

					OutScript := fmt.Sprintf(`const SELF = document.querySelector("[melte-id='%s']")`, n.Data+fmt.Sprintf("%d", CCount))

					// this doesnt loop over scripts in html file: fix
					// We need to move the script to end and add module tag
					for _, a := range child.Attr {
						if a.Key == "ssr" {
							ctx.RunScript(OutScript+child.FirstChild.Data, fmt.Sprintf("%v.js", CCount))
						}

					}
					for _, i := range child.Attr {
						if i.Key == "type" && i.Val == "module" {
							isExternal := false
							p := ""
							for _, k := range child.Attr {
								if k.Key == "src" {
									isExternal = true
									p = k.Val
									k.Val += ".melte-out.js"
								}
							}
							if isExternal {
								fmt.Println("Etefner")
								ExternalScripts = append(ExternalScripts, p)
								continue c
							} else {
								scriptComponent := &html.Node{
									Data:     "script",
									Type:     html.ElementNode,
									DataAtom: atom.Script,
									Attr:     child.Attr,
								}
								for child := child.FirstChild; child != nil; child = child.NextSibling {
									newScript := &html.Node{
										Data: OutScript + child.Data,
										Type: html.TextNode,
									}
									scriptComponent.AppendChild(newScript)
								}
								scriptComponent.Attr = append(scriptComponent.Attr, html.Attribute{
									Key: "melte-docpos",
									Val: pagePath,
								})

								child.RemoveChild(child.FirstChild)
								if err != nil {
									panic(err)
								}
								Scripts = append(Scripts, *scriptComponent)
								ScriptIDs = append(ScriptIDs, fmt.Sprintf("out-%s%d.js", n.Data, CCount))
								if child.Parent != nil {
									child.Parent.RemoveChild(child)

								}
								continue c
							}
						}
					}
					scriptData += OutScript + child.Data + "/n"
					if child.Parent != nil {
						child.Parent.RemoveChild(child)

					}
				} else {
					n.AppendChild(child)
				}
			}
			if scriptData != "" {
				scriptComponent := &html.Node{
					Data:     "script",
					Type:     html.ElementNode,
					DataAtom: atom.Script,
				}
				newScript := &html.Node{
					Data: scriptData,
					Type: html.TextNode,
				}
				scriptComponent.AppendChild(newScript)

				scriptComponent.Attr = append(scriptComponent.Attr, html.Attribute{
					Key: "melte-docpos",
					Val: pagePath,
				})
				Scripts = append(Scripts, *scriptComponent)
				ScriptIDs = append(ScriptIDs, fmt.Sprintf("out-%s%d.js", n.Data, CCount))

			}
		}
		if n.Data == "slot" && !isChildOf(n, "slot") && !done {
			n.Attr = append(n.Attr, html.Attribute{
				Key: "melte-id",
				Val: n.Data + fmt.Sprintf("%d", CCount),
			})
			for _, i := range slotInsert {
				n.AppendChild(i)

			}
			n.Data = "slotted"
		}
	}

	for child := n.FirstChild; child != nil; child = child.NextSibling {
		replaceSlot(child, pagePath, rootCopy, done, ctx)
		if child.Data == "slot" {
			break
		}
	}
}

func ParseHTMLFragmentFromPath(path string) html.Node {
	file, err := os.ReadFile(path)
	if err != nil {
		panic(err)
	}
	file = []byte(checkHTMLFile(string(file), path, getContext(path)))
	root, err := html.Parse(strings.NewReader(string(file)))
	if err != nil {
		panic(err)
	}
	return *root
}

func ParseHTMLFragmentFromString(file string, path string) html.Node {
	root, err := html.Parse(strings.NewReader(checkHTMLFile(file, path, getContext(path))))
	if err != nil {
		panic(err)
	}
	return *root
}

func ParseHTMLStringAsComponent(root string, path string) []*html.Node {
	root = checkHTMLFile(root, path, getContext(path))
	rootList, err := html.ParseFragment(strings.NewReader(root), &html.Node{
		Data:     "div",
		DataAtom: atom.Div,
		Type:     html.ElementNode,
	})
	if err != nil {
		panic("failed to parse component")
	}
	return rootList
}

func ParseHTMLAsComponent(path string) []*html.Node {
	file, err := os.ReadFile(path)
	if err != nil {
		panic(err)
	}
	file = []byte(checkHTMLFile(string(file), path, getContext(path)))
	rootList, err := html.ParseFragment(strings.NewReader(string(file)), &html.Node{
		Data:     "div",
		DataAtom: atom.Div,
		Type:     html.ElementNode,
	})
	if err != nil {
		panic("failed to parse component")
	}
	return rootList
}

func isChildOf(child *html.Node, parentName string) bool {
	for parent := child.Parent; parent != nil; parent = parent.Parent {
		if parent.Data == parentName {
			return true
		}
	}
	return false
}
